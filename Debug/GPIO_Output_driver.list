
GPIO_Output_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00001390  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000388  08000388  00001390  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003f0  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000177  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd8a  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ac6  00000000  00000000  0000f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fef4  00000000  00000000  0001022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  00060168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00060218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000370 	.word	0x08000370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000370 	.word	0x08000370

080001d8 <GPIOA_Init>:

#define RCC_PLLCFGR_PLLN_2EN    (1U << 7)

#define RCC_PLLCFGR_PLLPEN      (1U << 0)

void GPIOA_Init(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

	// Configure PLL as clock source

	// Enable HSI ( = 16 MHZ) as PLL clock source

	 RCC->CR |= RCC_CR_HSIONEN;
 80001dc:	4b20      	ldr	r3, [pc, #128]	@ (8000260 <GPIOA_Init+0x88>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000260 <GPIOA_Init+0x88>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

	// Configure PLLM and so  VCO input frequency  = PLL input clock frequency / PLLM with 2 ≤ PLLM ≤ 63


	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLMEN ; // VCO input frequency = 2 Mhz
 80001e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000260 <GPIOA_Init+0x88>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000260 <GPIOA_Init+0x88>)
 80001ee:	f043 0308 	orr.w	r3, r3, #8
 80001f2:	6053      	str	r3, [r2, #4]

	// Configure PLLIN and so  VCO output frequency = VCO input frequency × PLLIN  with  50 ≤ PLLIN ≤ 432

	// set PLLIN to 96 , VCO output frequency = 2 * 96 = 192 Mhz

	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_1EN ;
 80001f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000260 <GPIOA_Init+0x88>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a19      	ldr	r2, [pc, #100]	@ (8000260 <GPIOA_Init+0x88>)
 80001fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80001fe:	6053      	str	r3, [r2, #4]
	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_2EN ;
 8000200:	4b17      	ldr	r3, [pc, #92]	@ (8000260 <GPIOA_Init+0x88>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	4a16      	ldr	r2, [pc, #88]	@ (8000260 <GPIOA_Init+0x88>)
 8000206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800020a:	6053      	str	r3, [r2, #4]

    // Configure PLLP:  PLL output clock frequency = VCO frequency(192 Mhz) / PLLP (!!not to exceed 100MHz !!)


	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN ;  // 192 /4 = 48 Mhz
 800020c:	4b14      	ldr	r3, [pc, #80]	@ (8000260 <GPIOA_Init+0x88>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a13      	ldr	r2, [pc, #76]	@ (8000260 <GPIOA_Init+0x88>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6053      	str	r3, [r2, #4]

	// Configure PLLQ (  USB OTG FS Fclock = 48 MHz)

	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN;
 8000218:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <GPIOA_Init+0x88>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a10      	ldr	r2, [pc, #64]	@ (8000260 <GPIOA_Init+0x88>)
 800021e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000222:	6053      	str	r3, [r2, #4]

	 // enable PLL

	  RCC->CR |= RCC_CR_PLLONEN;
 8000224:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <GPIOA_Init+0x88>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <GPIOA_Init+0x88>)
 800022a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800022e:	6013      	str	r3, [r2, #0]

	// enable clock access for port A ( PA1)

    RCC->AHB1ENR |= RCC_GPIOAEN ;
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <GPIOA_Init+0x88>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <GPIOA_Init+0x88>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA5 mode to output (0x1 = 10:11)

	GPIOA->MODER |= (1U << 10);
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <GPIOA_Init+0x8c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <GPIOA_Init+0x8c>)
 8000242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000246:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(1U << 11);
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <GPIOA_Init+0x8c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <GPIOA_Init+0x8c>)
 800024e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000252:	6013      	str	r3, [r2, #0]


}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000

08000268 <LED_toggle>:


void LED_toggle(void) {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0

	// set PA5 high

	GPIOA->ODR |= (1U << 5) ;
 800026e:	4b13      	ldr	r3, [pc, #76]	@ (80002bc <LED_toggle+0x54>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a12      	ldr	r2, [pc, #72]	@ (80002bc <LED_toggle+0x54>)
 8000274:	f043 0320 	orr.w	r3, r3, #32
 8000278:	6153      	str	r3, [r2, #20]

	// simple delay

	for (volatile uint32_t i = 0; i < 500000; i++) {};
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	e002      	b.n	8000286 <LED_toggle+0x1e>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <LED_toggle+0x58>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d9f8      	bls.n	8000280 <LED_toggle+0x18>

	// set PA5 low

	GPIOA->ODR &= ~(1U << 5) ;
 800028e:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <LED_toggle+0x54>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LED_toggle+0x54>)
 8000294:	f023 0320 	bic.w	r3, r3, #32
 8000298:	6153      	str	r3, [r2, #20]

	// simple delay

	for (volatile uint32_t i = 0; i < 500000; i++) {};
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	e002      	b.n	80002a6 <LED_toggle+0x3e>
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	3301      	adds	r3, #1
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	4a05      	ldr	r2, [pc, #20]	@ (80002c0 <LED_toggle+0x58>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d9f8      	bls.n	80002a0 <LED_toggle+0x38>
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40020000 	.word	0x40020000
 80002c0:	0007a11f 	.word	0x0007a11f

080002c4 <main>:

#include "GPIOA_Output.h"
#include "stm32f4xx.h"


int main (void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0


	 GPIOA_Init();
 80002c8:	f7ff ff86 	bl	80001d8 <GPIOA_Init>


	while (1) {


		LED_toggle();
 80002cc:	f7ff ffcc 	bl	8000268 <LED_toggle>
 80002d0:	e7fc      	b.n	80002cc <main+0x8>
	...

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	@ (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	@ (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000306:	f7ff ffdd 	bl	80002c4 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	@ (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	@ (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	@ (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	@ (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
