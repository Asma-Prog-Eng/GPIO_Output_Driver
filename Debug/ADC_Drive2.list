
ADC_Drive2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000600  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000798  08000798  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000798  08000798  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000798  08000798  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000798  08000798  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000798  08000798  00001798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800079c  0800079c  0000179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080007a0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000008  080007a4  00002008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080007a4  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006a0  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000289  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00002960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e970  00000000  00000000  00002a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d74  00000000  00000000  00011395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053b19  00000000  00000000  00012109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000188  00000000  00000000  00065c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00065df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000780 	.word	0x08000780

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08000780 	.word	0x08000780

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <ADC1_init>:

#define RCC_PLLCFGR_PLLN_2EN    (1U << 7)

#define RCC_PLLCFGR_PLLPEN      (1U << 0)

void ADC1_init(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

	// Configure PLL as clock source

	// Enable HSI ( = 16 MHZ) as PLL clock source

	 RCC->CR |= RCC_CR_HSIONEN;
 8000554:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <ADC1_init+0xc4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2e      	ldr	r2, [pc, #184]	@ (8000614 <ADC1_init+0xc4>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6013      	str	r3, [r2, #0]

	// Configure PLLM and so  VCO input frequency  = PLL input clock frequency / PLLM with 2 ≤ PLLM ≤ 63


	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLMEN ; // VCO input frequency = 2 Mhz
 8000560:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <ADC1_init+0xc4>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	4a2b      	ldr	r2, [pc, #172]	@ (8000614 <ADC1_init+0xc4>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6053      	str	r3, [r2, #4]

	// Configure PLLIN and so  VCO output frequency = VCO input frequency × PLLIN  with  50 ≤ PLLIN ≤ 432

	// set PLLIN to 96 , VCO output frequency = 2 * 96 = 192 Mhz

	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_1EN ;
 800056c:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <ADC1_init+0xc4>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	4a28      	ldr	r2, [pc, #160]	@ (8000614 <ADC1_init+0xc4>)
 8000572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000576:	6053      	str	r3, [r2, #4]
	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_2EN ;
 8000578:	4b26      	ldr	r3, [pc, #152]	@ (8000614 <ADC1_init+0xc4>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a25      	ldr	r2, [pc, #148]	@ (8000614 <ADC1_init+0xc4>)
 800057e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000582:	6053      	str	r3, [r2, #4]

    // Configure PLLP:  PLL output clock frequency = VCO frequency(192 Mhz) / PLLP (!!not to exceed 100MHz !!)


	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN ;  // 192 /4 = 48 Mhz
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <ADC1_init+0xc4>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a22      	ldr	r2, [pc, #136]	@ (8000614 <ADC1_init+0xc4>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6053      	str	r3, [r2, #4]

	// Configure PLLQ (  USB OTG FS Fclock = 48 MHz)

	 RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN;
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <ADC1_init+0xc4>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <ADC1_init+0xc4>)
 8000596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800059a:	6053      	str	r3, [r2, #4]

	// Can be checked in ADC common register : bit ADCPRE

	 // enable PLL

	  RCC->CR |= RCC_CR_PLLONEN;
 800059c:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <ADC1_init+0xc4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <ADC1_init+0xc4>)
 80005a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005a6:	6013      	str	r3, [r2, #0]

	// enable clock access for port A ( PA1)

    RCC->AHB1ENR |= RCC_GPIOAEN ;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <ADC1_init+0xc4>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ac:	4a19      	ldr	r2, [pc, #100]	@ (8000614 <ADC1_init+0xc4>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6313      	str	r3, [r2, #48]	@ 0x30

	// configure PA1 pin mode to analog

   GPIOA->MODER |= (0x3 << 2);
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <ADC1_init+0xc8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <ADC1_init+0xc8>)
 80005ba:	f043 030c 	orr.w	r3, r3, #12
 80005be:	6013      	str	r3, [r2, #0]

/*************************Configure ADC parameters *************************************/

	// enable clock access for ADC periph

    RCC->APB2ENR |= RCC_ADC1EN;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <ADC1_init+0xc4>)
 80005c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c4:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <ADC1_init+0xc4>)
 80005c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ca:	6453      	str	r3, [r2, #68]	@ 0x44

	// configure conversion sequence start :  single conversion- channel 1 (ADC1_1)

    ADC1->SQR3 |= ADC_SQR3SQ1;
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <ADC1_init+0xcc>)
 80005ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d0:	4a12      	ldr	r2, [pc, #72]	@ (800061c <ADC1_init+0xcc>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6353      	str	r3, [r2, #52]	@ 0x34


	// configure senquence length to 1 conversion

    ADC1->SQR1 &=~ADC_SQR1L ;
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <ADC1_init+0xcc>)
 80005da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005dc:	4a0f      	ldr	r2, [pc, #60]	@ (800061c <ADC1_init+0xcc>)
 80005de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80005e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Configure resolution to 10-bits

    ADC1->CR1 |= (1U << 24);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <ADC1_init+0xcc>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <ADC1_init+0xcc>)
 80005ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ee:	6053      	str	r3, [r2, #4]

    ADC1->CR1 &= ~(1U << 25);
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <ADC1_init+0xcc>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a09      	ldr	r2, [pc, #36]	@ (800061c <ADC1_init+0xcc>)
 80005f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80005fa:	6053      	str	r3, [r2, #4]

	// enable ADC periph

    ADC1->CR2 |= ADC_CR2ADON;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <ADC1_init+0xcc>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <ADC1_init+0xcc>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6093      	str	r3, [r2, #8]


}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	40012000 	.word	0x40012000

08000620 <ADC_resolution_calculation>:
   return (ADC1->DR & 0xFF);


}

int ADC_resolution_calculation(int ADC_bit_resolution ) {
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	int result = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]

	int temp = ADC_bit_resolution ;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	60bb      	str	r3, [r7, #8]

	while ( temp > 0) {
 8000630:	e005      	b.n	800063e <ADC_resolution_calculation+0x1e>

		    result *= 2;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
			temp -=1;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3b01      	subs	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
	while ( temp > 0) {
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	dcf6      	bgt.n	8000632 <ADC_resolution_calculation+0x12>
	}

	return result;
 8000644:	68fb      	ldr	r3, [r7, #12]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <main>:
int ADC_bit_resolution = 12;

double Vref = 3.00;


int main (void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0


	 ADC1_init();
 800065a:	f7ff ff79 	bl	8000550 <ADC1_init>

	// Default ADC resolution = 8-bits

	 ADC_resolution = (double) ADC_resolution_calculation(ADC_bit_resolution);
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <main+0x80>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffdc 	bl	8000620 <ADC_resolution_calculation>
 8000668:	4603      	mov	r3, r0
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff06 	bl	800047c <__aeabi_i2d>
 8000670:	4602      	mov	r2, r0
 8000672:	460b      	mov	r3, r1
 8000674:	4918      	ldr	r1, [pc, #96]	@ (80006d8 <main+0x84>)
 8000676:	e9c1 2300 	strd	r2, r3, [r1]

		//Sensor_val = (double)(Raw_val *Vref)/(ADC_resolution-1);

		// set PA5 mode to output (0x1 = 10:11)

		GPIOA->MODER |= (1U << 10);
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <main+0x88>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <main+0x88>)
 8000680:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000684:	6013      	str	r3, [r2, #0]

		GPIOA->MODER &= ~(1U << 11);
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <main+0x88>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <main+0x88>)
 800068c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000690:	6013      	str	r3, [r2, #0]

		// set PA5 high

		//GPIOA->BSRR |= (1U << 5) ;

		GPIOA->ODR |= (1U << 5) ;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <main+0x88>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <main+0x88>)
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	6153      	str	r3, [r2, #20]

		// delay of 1s
		//for (volatile uint32_t i = 0; i < 1250000; i++) {};

		for (volatile uint32_t i = 0; i < 500000; i++) {};
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e002      	b.n	80006aa <main+0x56>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <main+0x8c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d9f8      	bls.n	80006a4 <main+0x50>
		// set PA5 low

		///GPIOA->BSRR |= (1U << 21) ;


		GPIOA->ODR &= ~(1U << 5) ;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <main+0x88>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <main+0x88>)
 80006b8:	f023 0320 	bic.w	r3, r3, #32
 80006bc:	6153      	str	r3, [r2, #20]

		for (volatile uint32_t i = 0; i < 500000; i++) {};
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	e002      	b.n	80006ca <main+0x76>
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <main+0x8c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d9f8      	bls.n	80006c4 <main+0x70>
		GPIOA->MODER |= (1U << 10);
 80006d2:	e7d2      	b.n	800067a <main+0x26>
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000028 	.word	0x20000028
 80006dc:	40020000 	.word	0x40020000
 80006e0:	0007a11f 	.word	0x0007a11f

080006e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000712:	f000 f811 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000716:	f7ff ff9d 	bl	8000654 <main>

0800071a <LoopForever>:

LoopForever:
  b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000728:	080007a0 	.word	0x080007a0
  ldr r2, =_sbss
 800072c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000730:	20000030 	.word	0x20000030

08000734 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>
	...

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4d0d      	ldr	r5, [pc, #52]	@ (8000770 <__libc_init_array+0x38>)
 800073c:	4c0d      	ldr	r4, [pc, #52]	@ (8000774 <__libc_init_array+0x3c>)
 800073e:	1b64      	subs	r4, r4, r5
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	2600      	movs	r6, #0
 8000744:	42a6      	cmp	r6, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	4d0b      	ldr	r5, [pc, #44]	@ (8000778 <__libc_init_array+0x40>)
 800074a:	4c0c      	ldr	r4, [pc, #48]	@ (800077c <__libc_init_array+0x44>)
 800074c:	f000 f818 	bl	8000780 <_init>
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	2600      	movs	r6, #0
 8000756:	42a6      	cmp	r6, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000760:	4798      	blx	r3
 8000762:	3601      	adds	r6, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f855 3b04 	ldr.w	r3, [r5], #4
 800076a:	4798      	blx	r3
 800076c:	3601      	adds	r6, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	08000798 	.word	0x08000798
 8000774:	08000798 	.word	0x08000798
 8000778:	08000798 	.word	0x08000798
 800077c:	0800079c 	.word	0x0800079c

08000780 <_init>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr

0800078c <_fini>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr
